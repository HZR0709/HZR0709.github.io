{"meta":{"title":null,"subtitle":"","description":"","author":null,"url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2024-05-17T06:39:06.275Z","updated":"2024-05-17T06:39:06.275Z","comments":true,"path":"archives.html","permalink":"http://example.com/archives.html","excerpt":"","text":"title: 文章归档layout: archivespermalink: archives.html"},{"title":"tags","date":"2024-05-14T16:48:51.000Z","updated":"2024-05-14T16:48:51.348Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo系列 搭建博客网站","slug":"Hexo-Create-Blog","date":"2024-05-16T17:22:31.000Z","updated":"2024-05-16T17:23:24.919Z","comments":true,"path":"2024/05/17/Hexo-Create-Blog/","permalink":"http://example.com/2024/05/17/Hexo-Create-Blog/","excerpt":"","text":"写在前面的话：本系列文章主要参考 Hexo官方说明文档，同时结合自己在使用过程中的一些心得体会，撷取下来，和大家分享分享。好，下面闲话不多说，马上开始我们的 Hexo 之旅吧 温馨提醒：博主使用的操作系统是 Win10，其他操作系统可能会略有不同 一、Hexo 简介Hexo 是什么呢？也许引用官方文档中的说明是再好不过了： Hexo 是一个快速、简洁且高效的 博客框架。它使用 Markdown（或其他渲染引擎）解析文章，在数秒内，即可使用靓丽的主题生成静态网页 二、Hexo 安装1、安装 Git Git 是一个开源的分布式版本控制系统 下载地址：https://git-scm.com/download，按照默认傻瓜式安装就好了 补充一句，如果你已经安装了 Git，你可以通过 Git 本身获得最新的开发版本： 1$ git clone https://github.com/git/git 完成之后到桌面空白处单击鼠标右键，如果有出现 Git Bash Here 选项，则证明已经安装成功 2、安装 Node.js Node.js 是一个基于 Google V8 引擎的 JavaScript 环境，它支持在后端运行 JavaScript 而 NPM 是默认与 Node.js 一起安装的包管理工具 下载地址：https://nodejs.org/en，同样是按照默认傻瓜式安装就好了 完成之后到桌面空白处点击鼠标右键，选择 Git Bash Here 进入 bash 窗口 输入 node -v 命令可查看 node 版本，输入 npm -v 命令可查看 npm 版本，用于验证安装是否成功 12345$ node -vv8.11.3$ npm -v5.6.0 3、下载 Hexo在之前说过，NPM 是一个包管理工具，因此我们可以通过 NPM 工具下载 Hexo 框架 npm install moduleName 命令用于下载模块，其中 -g 参数表示在全局进行安装 1$ npm install -g hexo 等待完成之后，输入命令 hexo -v 查看 Hexo 版本，验证安装是否成功 123456789101112131415161718$ hexo -vhexo: 3.7.1hexo-cli: 1.1.0os: Windows_NT 10.0.16299 win32 x64http_parser: 2.8.0node: 8.11.3v8: 6.2.414.54uv: 1.19.1zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.32.0napi: 3openssl: 1.0.2oicu: 60.1unicode: 10.0cldr: 32.0tz: 2017c 三、Hexo 本地建站1、本地建站选择一个合适的位置创建一个文件夹，该文件夹将作为 Hexo 的根目录，用来储存本地文件 进入该文件夹打开 git bash 窗口，输入命令 hexo init 和 npm install hexo init 命令可以将该文件夹初始化为 Hexo 根目录 npm install 命令可以自动安装依赖列表中列出的所有模块 123456789101112$ hexo initINFO Cloning hexo-starter to file......INFO Install dependencies......added 397 packages in 34.63sINFO Start blogging with Hexo!$ npm install......audited 4704 packages in 5.315sfound 0 vulnerabilities 2、基本配置打开 根目录 下的 _config.yml 文件，它是一个配置文件，可以直接用记事本打开 下面介绍几个比较重要配置，完整的网站配置可以参考我的另一篇文章 —— Hexo系列(二) 配置文件详解 注意在设置时，属性与值之间需要留有一个空格，例如：language: zh-CN 12345678#Site 网站相关配置title 网站标题subtitle 网站副标题description 网站描述keywords 网站关键词author 网站作者名字language 网站使用的语言，这里填zh-CNtimezone 网站使用的时区，这里默认使用电脑的时区 3、测试至此，利用 Hexo 搭建的个人博客网站已经可以在本地上正常运行了 我们一起来看看效果吧，打开 git bash，输入命令 hexo s 启动本地站点 123$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 如果出现了这样的提示信息，即表示本地建站成功 在浏览器地址栏中输入 http://localhost:4000/， 就可以看到站点在本地运行的结果了 四、Hexo 远端部署我们知道，GitHub 是一个基于 git 的代码托管平台，是世界上最大的开源社区 GitHub 提供了一项名为 GitHub Pages 的服务，它允许用户自定义项目首页替代默认的源码列表 因此，GitHub Pages 可以被认为是由用户编写的、托管在 GitHub 上的静态网页 而我们的目的，正是要把用 Hexo 在本地搭建的网站部署到 Github 上，使得站点可以被公共访问 1、注册 Github 账号登陆 GitHub官网 ，按要求填写好自己的个人信息（包括用户名，邮箱，密码等），然后进行邮箱验证后就注册好 GitHub 账号了，十分方便快捷 完成之后还需要在本地配置一下自己的个人信息，打开 git bash 窗口，输入以下的命令即可 （注意要将 your_name 和 your_email 替换成自己的信息） 12$ git config --global user.name your_name$ git config --global user.email your_email 2、创建 GitHub 仓库打开 GitHub 官网的个人首页，点击 New repository 新建仓库，并按以下说明填写仓库信息： Repository name 的格式为 username.github.io，其中，username 是自己的 GitHub 名称 另外，建议勾选 Initialize this repository with a README 选项，生成 README.md 文件 最后点击 Create repository，创建仓库 此时打开 Settings 就可以看到自己的个人网站已经生成，网址为 https://username.github.io 3、安装插件进入站点根文件夹，打开 git bash 输入 npm install hexo-deployer-git --save 命令安装插件 1$ npm install hexo-deployer-git --save 4、修改配置打开根文件夹下的 _config.yml 配置文件，进行如下配置 （注意要将 username 替换成自己的名字，并且在属性与值之间留一个空格） 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/username/username.github.io.git branch: master 5、配置 SSH进入站点根文件夹，打开 git bash，输入 ssh-keygen -t rsa -C &quot;your_email&quot; 命令并一路回车获得密钥 （注意将 your_email 替换成自己的邮箱地址） 完成后，根据提示信息中的文件地址 /c/Users/user/.ssh/id_rsa.pub 找到 id_rsa.pub 文件，复制文件里面的内容 12345678910111213141516171819202122$ ssh-keygen -t rsa -C &quot;your_email&quot;Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/user/.ssh/id_rsa): &lt;Enter&gt;Enter passphrase (empty for no passphrase): &lt;Enter&gt;Enter same passphrase again: &lt;Enter&gt;Your identification has been saved in /c/Users/user/.ssh/id_rsa.Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.The key fingerprint is:SHA256:0Is/n+PgAf+mUEhFgTx+nVyJRZ4Pk/nqj3YOnVOAQmE email_addressThe key&#x27;s randomart image is:+---[RSA 2048]----+| . o+.E=o. || +o o..o= || .o..o.oO . || ..+..+. = . || +.S o .|| = o o || . * o + || o *oo.o.. || o+=oo+o |+----[SHA256]-----+ 登录 Github，打开 Settings 选择 SSH and GPG keys，选择 New SSh Key 将复制的内容添加到 Key 中， Title 可以自己设定，最后点击 Add SSH Key 即可 最后，回到站点根文件夹，打开 git bash，输入 ssh -T git@github.com 命令验证是否添加成功 1234567$ ssh -T git@github.comThe authenticity of host &#x27;github.com (13.250.177.223)&#x27; can&#x27;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? &lt;yes&gt; &lt;Enter&gt;Warning: Permanently added &#x27;github.com,13.250.177.223&#x27; (RSA) to the list of known hosts.Hi Forwhfang! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 6、发布网页git bash 中输入命令 hexo g 生成静态文件，输入命令 hexo d 部署到 Github 此时，打开 https://username.github.io 就可以看见已经部署好的网站了，大功告成！","categories":[],"tags":[]},{"title":"Hexo-常用命令详解","slug":"Hexo-Commands","date":"2024-05-16T17:15:31.000Z","updated":"2024-05-16T17:17:14.270Z","comments":true,"path":"2024/05/17/Hexo-Commands/","permalink":"http://example.com/2024/05/17/Hexo-Commands/","excerpt":"","text":"Hexo系列(三) 常用命令详解Hexo 框架可以帮助我们快速创建一个属于自己的博客网站，熟悉 Hexo 框架提供的命令有利于我们管理博客 1、hexo inithexo init 命令用于初始化本地文件夹为网站的根目录 1$ hexo init [folder] folder 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录 2、hexo new12hexo new` 命令用于新建文章，一般可以简写为 `hexo n$ hexo new [layout] &lt;title&gt; layout 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定 title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围 3、hexo generate12hexo generate` 命令用于生成静态文件，一般可以简写为 `hexo g$ hexo generate -d 选项，指定生成后部署，与 hexo d -g 等价 详细信息请参考：https://hexo.io/docs/generating 4、hexo server12hexo server` 命令用于启动本地服务器，一般可以简写为 `hexo s$ hexo server -p 选项，指定服务器端口，默认为 4000 -i 选项，指定服务器 IP 地址，默认为 0.0.0.0 -s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视 说明 ：运行服务器前需要安装 hexo-server 插件 1$ npm install hexo-server --save 详细信息请参考：https://hexo.io/docs/server.html 5、hexo deploy12hexo deploy` 命令用于部署网站，一般可以简写为 `hexo d$ hexo deploy -g 选项，指定生成后部署，与 hexo g -d 等价 说明 ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明 12345deploy: type: git repo: &lt;repository url&gt; branch: master message: 自定义提交消息，默认为Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125; 详细信息请参考：https://hexo.io/docs/deployment.html 6、hexo cleanhexo clean 命令用于清理缓存文件，是一个比较常用的命令 1$ hexo clean 网站显示异常时可尝试此操作 7、Option（1）hexo –safehexo --safe 表示安全模式，用于禁用加载插件和脚本 1$ hexo --safe 安装新插件时遇到问题可尝试此操作 （2）hexo –debughexo --debug 表示调试模式，用于将消息详细记录到终端和 debug.log 文件 1$ hexo --debug （3）hexo –silenthexo --silent 表示静默模式，用于静默输出到终端 1$ hexo --silent 【参考资料】 https://hexo.io/docs/commands","categories":[],"tags":[]},{"title":"Hexo系列-配置文件详解","slug":"Hexo-ConfigFile","date":"2024-05-15T17:02:54.000Z","updated":"2024-05-15T17:27:47.074Z","comments":true,"path":"2024/05/16/Hexo-ConfigFile/","permalink":"http://example.com/2024/05/16/Hexo-ConfigFile/","excerpt":"","text":"Hexo系列-配置文件详解Hexo 是一款优秀的博客框架，在使用 Hexo 搭建一个属于自己的博客网站后，我们还需要对其进行配置，使得 Hexo 更能满足自己的需求 这里所说的配置文件，是位于站点根目录下的 _config.yml 文件，可以直接用记事本打开进行编辑，文件中的具体配置项如下： 1、Site网站的个性化描述，大家需要根据自己的实际情况认真填写 Setting 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站关键字 author 网站作者 language 网站使用的语言，默认是en ，中文网站填zh-Hans timezone 网站使用的时区，默认为 计算机的预设置，可以不填 2、URL关于博客文章 URL 的设置，一般不用进行更改 Setting 描述 url 网站的网址 root 网站的根目录， 也是存放文章的目录 permalink 文章的链接格式 ，默认为 :year/:month/:day/:title/ permalink_defaults 永久链接中每个段的默认值 3、Directory关于文件夹的设置，也是一般不用进行更改 Setting 描述 source_dir 资源文件夹 ，存放用户的资源文件，默认为 source public_dir 公用文件夹 ，存放生成的静态文件，默认为 public tag_dir 标签目录 ，默认为 tags archive_dir 档案目录 ，默认为 archives category_dir 分类目录 ，默认为 categories code_dir 代码目录 ，默认为 downloads/code i18n_dir i18n目录 ，默认为 :lang skip_render 储存站长验证文件，跳过指定文件的渲染 4、Writing这里是比较常用的写作设置，可以根据自己的写作习惯随时进行调整 Setting 描述 new_post_name 文章的文件名格式，默认为 :title.md default_layout 预设的布局模板，默认为 post titlecase 标题是否使用首字母大写 ，默认为 false external_link 链接是否在新标签页中打开，默认为 true filename_case 将文件名转换为 1 小写 或 2 大写，默认为 0 render_drafts 是否显示渲染草稿，默认为 false post_asset_folder 是否启用 Asset 文件夹，默认为 false relative_link 是否建立相对于根文件夹的链接，默认为 false future 是否显示未来文章，默认为 true highlight 代码块设置 highlight Setting 描述 enable 是否使用代码高亮 ，默认为 true line_number 是否显示行号 ，默认为 true auto_detect 是否自动检测语言 ，默认为 false tab_replace tab 替代设置 5、Home page setting首页设置，可以自己决定每页显示的文章数量和显示文章的顺序 Setting 描述 index_generator 主页设置 index_generator Setting 描述 path 首页的根目录 per_page 每页显示文章的数量，默认为 10 order_by 显示文章的顺序，默认为 -date 6、Category &amp; Tag这里是关于分类和标签的配置 Setting 描述 default_category 预设分类，默认为 uncategorized category_map 分类别名 tag_map 标签别名 7、Date &#x2F; Time format时间和日期的显示格式，一般没特殊要求的也不需要改 Setting 描述 date_format 日期格式，默认为 YYYY-MM-DD time_format 时间格式，默认为 HH:mm:ss 8、Pagination这里是分页设置，可以自己决定单个页面上显示的文章数量和分页目录 Setting 描述 per_page 单个页面上显示的文章数量，默认为 10 ，用 0 表示禁用分页 pagination_dir 分页目录，默认为 page 9、Extensions这里可以设置主题类型和插件，之后的文章讲到更换博客主题时需要进行更改 Setting 描述 theme 博客使用的主题，默认为 landscape 10、Deployment这里是关于网站部署的配置，常用的有部署类型和部署地址 Setting 描述 deploy 网站部署配置 deploy Setting 描述 type 网站部署类型 repo 网站部署地址","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hexo系列-撰写文章","slug":"Hexo-Writing","date":"2024-05-15T08:29:26.000Z","updated":"2024-05-15T17:15:50.925Z","comments":true,"path":"2024/05/15/Hexo-Writing/","permalink":"http://example.com/2024/05/15/Hexo-Writing/","excerpt":"","text":"一、创建文章在站点文件中打开git bash，输入如下命令创建文章，其中title为文章的标题 $ hexo new &quot;title&quot; 当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为 title.md 这个文件就是将要发布到网站上的原始文件，用于记录文章内容 下面，我们将要在这个文件中写下我们的第一篇博客 二、编写文章（基于Markdown）1、Markdown简介 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式 基于Markdown语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言 2、Markdown语法推荐一款简洁易用的的Markdown编辑器 —— Typora 简单而强大，不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以实时预览 附上Typora的下载地址：https://www.typora.io/ 下面介绍一些常用的Markdown语法 （1）标题Markdown语法： #一级标题 ##二级标题 ###三级标题 ####四级标题 #####五级标题 ######六级标题 Typora快捷键：Ctrl + 1：一级标题 Ctrl + 2：二级标题 Ctrl + 3：三级标题 Ctrl + 4：四级标题 Ctrl + 5：五级标题 Ctrl +6：六级标题 Ctrl + 0：段落 （2） 粗体、斜体、删除线和下划线Markdown语法： *斜体* **粗体** ***加粗斜体*** ~~删除线~~ Typora快捷键：Ctrl + L：斜体 Ctrl + B：粗体 Ctrl + U：加粗斜体 Alt + Ctrl + 5：删除线 （3）引用块：Markdown语法： &gt; 文字引用 Typora快捷键：Ctrl + Shift + Q （4）代码块Markdown语法： `行内代码&#96; `&#96;&#96; 多行代码多行代码 `&#96;&#96; Typora快捷键：行内代码：Ctrl + Shift + &#96; 多行代码：Ctrl + Shift + K （5）公式块Markdown语法： $$ 数学公式 $$ Typora快捷键：Ctrl + Shift + M （6）分割线Markdown语法： 方法一：—方法二：+++方法三：*** （7）列表Markdown语法： 1.有序列表项 * 无序列表项 + 无序列表项- 无序列表项 Typora快捷键：有序列表项：Ctrl + Shift + [ 无序列表项：Ctrl + Shift + ] （8）表格Markdown语法： 表头1|表头2 -|-|- 内容11|内容12 内容21|内容22 Typora快捷键：Ctrl + T （9）超链接Markdown语法： 方法一：[链接文字] (链接地址 &quot;链接描述”)例如：[示例链接] (https://wwww.example.com/ &quot;示例链接”) 方法二：&lt;链接地址&gt;例如：&lt;https://www.example.com/&gt; Typora快捷键：Ctrl + K （10）图片Markdown语法： ![图片文字] (图片地址 &quot;图片描述”)例如： ![示例图片](https://www.example.com/example.PNG &quot;示例图片”) Typora快捷键：Ctrl + Shift + L 说明：在Hexo中插入图片时，请按照以下的步骤进行设置 1.将 站点配置文件中 的 post_asset_folder 选项的值设置为true 2.在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image --save 安装插件 3.这样，当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与title同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可 例如，在资源文件夹（就是那个与title同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句 ![示例图片] (title/example.PNG &quot;示例图片&quot;) 添加图片 3、高级设置（1）模版设置当我们使用命令 hexo new &quot;title&quot; 创建文章时，hexo会根据 /scaffolds/post.md 对新文章进行初始化 换言之， /sanffolds/post.md 就是新文章的模版，所以我们可以修改它来适应自己的写作习惯 一个简单的示例如下： 1234title: &#123;&#123;title&#125;&#125;date: &#123;&#123;date&#125;&#125;tags:categories: （2）头部设置在每篇利用hexo创建的文章的开头，都会有对文章进行说明的文字，叫做文章头部 文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等 一个简单的实力如下： 1234titile: Titledate: YYYY-MM--DD HH:MM:SStags: [tag1, tag2, ...]categories: category 注意：属性和属性值之间必须有一个空格，否则会解析错误 （3）首页显示在利用hexo框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容 如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简 这时，我们只需在文章中使用 &lt;!--more--&gt; 标志即可，表示只会显示标志前面的内容 三、部署发布在站点文件夹中打开 git bash，输入如下命令部署和发布文章 $ hexo g -d 建议：在使用 hexo g 部署之后，可以先使用 hexo s 运行本地站点，然后在浏览器输入地址 https://lacolhost:4000/ 查看运行结果，检查无误后再使用 hexo d 发布","categories":[],"tags":[{"name":"Hexo,Markdown","slug":"Hexo-Markdown","permalink":"http://example.com/tags/Hexo-Markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-05-14T13:03:51.099Z","updated":"2024-05-14T13:03:51.099Z","comments":true,"path":"2024/05/14/hello-world/","permalink":"http://example.com/2024/05/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Hexo,Markdown","slug":"Hexo-Markdown","permalink":"http://example.com/tags/Hexo-Markdown/"}]}